# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FA.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import face_recognition
import cv2

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setMinimumSize(QtCore.QSize(801, 633))
        MainWindow.setMaximumSize(QtCore.QSize(801, 633))
        MainWindow.setBaseSize(QtCore.QSize(801, 633))
        MainWindow.setMouseTracking(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Triangular)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.base = QtWidgets.QLabel(self.centralwidget)
        self.base.setGeometry(QtCore.QRect(24, 40, 301, 351))
        self.base.setTabletTracking(False)
        self.base.setText("")
        self.base.setPixmap(QtGui.QPixmap("1.jpg"))  # Set default base image
        self.base.setScaledContents(True)
        self.base.setObjectName("base")
        self.chosen = QtWidgets.QLabel(self.centralwidget)
        self.chosen.setGeometry(QtCore.QRect(470, 40, 301, 351))
        self.chosen.setScaledContents(True)
        self.chosen.setObjectName("chosen")
        self.laad = QtWidgets.QPushButton(self.centralwidget)
        self.laad.setGeometry(QtCore.QRect(22, 410, 751, 41))
        self.laad.setObjectName("laad")
        self.check = QtWidgets.QPushButton(self.centralwidget)
        self.check.setGeometry(QtCore.QRect(22, 450, 751, 41))
        self.check.setObjectName("check")
        self.message = QtWidgets.QLabel(self.centralwidget)
        self.message.setGeometry(QtCore.QRect(64, 510, 671, 61))
        font = QtGui.QFont()
        font.setPointSize(36)
        font.setBold(False)
        font.setWeight(50)
        self.message.setFont(font)
        self.message.setAlignment(QtCore.Qt.AlignCenter)
        self.message.setWordWrap(False)
        self.message.setObjectName("message")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 801, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_base_image = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.actionNew_base_image.setFont(font)
        self.actionNew_base_image.setObjectName("actionNew_base_image")
        self.menuFile.addAction(self.actionNew_base_image)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Add functionality to buttons and actions
        self.laad.clicked.connect(self.load_chosen_image)
        self.check.clicked.connect(self.check_images)
        self.actionNew_base_image.triggered.connect(self.load_new_base_image)

        # Store the paths of the base and chosen images
        self.base_image_path = "1.jpg"  # Initial base image
        self.chosen_image_path = None

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.base.setStatusTip(_translate("MainWindow", "Base image"))
        self.chosen.setStatusTip(_translate("MainWindow", "Chosen image"))
        self.chosen.setText(_translate("MainWindow", "TextLabel"))
        self.laad.setStatusTip(_translate("MainWindow", "Load a new image to check"))
        self.laad.setText(_translate("MainWindow", "Load an image"))
        self.check.setStatusTip(_translate("MainWindow", "click to check"))
        self.check.setText(_translate("MainWindow", "Check"))
        self.message.setStatusTip(_translate("MainWindow", "here, the matching result will appear "))
        self.message.setText(_translate("MainWindow", "Result"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionNew_base_image.setText(_translate("MainWindow", "New base image"))
        self.actionNew_base_image.setStatusTip(_translate("MainWindow", "click to load a new base image or use ctrl+N"))
        self.actionNew_base_image.setShortcut(_translate("MainWindow", "Ctrl+N"))

    # Function to load chosen image
    def load_chosen_image(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Choose Image", "", "Image Files (*.jpg *.jpeg *.png)", options=options)
        if file_path:
            self.chosen_image_path = file_path
            pixmap = QtGui.QPixmap(file_path)
            self.chosen.setPixmap(pixmap)
    
    # Function to load a new base image
    def load_new_base_image(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Choose Base Image", "", "Image Files (*.jpg *.jpeg *.png)", options=options)
        if file_path:
            self.base_image_path = file_path
            pixmap = QtGui.QPixmap(file_path)
            self.base.setPixmap(pixmap)
    
    # Function to check if the faces match
    def check_images(self):
        if not self.chosen_image_path:
            self.message.setText("Please load a chosen image.")
            return

        # Perform face verification
        if self.verify_faces(self.base_image_path, self.chosen_image_path):
            self.message.setText("The faces match!")
        else:
            self.message.setText("The faces do not match.")

    # Function for face verification
    def load_image(self, image_path):
        image = face_recognition.load_image_file(image_path)
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        return rgb_image

    def encode_face(self, image_path):
        image = self.load_image(image_path)
        face_encodings = face_recognition.face_encodings(image)
        if len(face_encodings) > 0:
            return face_encodings[0]
        else:
            return None

    def verify_faces(self, image1_path, image2_path):
        # Encode faces from both images
        encoding_1 = self.encode_face(image1_path)
        encoding_2 = self.encode_face(image2_path)

        if encoding_1 is None or encoding_2 is None:
            QMessageBox.warning(None, "Error", "One of the images doesn't contain a detectable face.")
            return False

        # Compare the faces and return True if they match
        results = face_recognition.compare_faces([encoding_1], encoding_2)
        return results[0]


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    try:
        sys.exit(app.exec_())
    except SystemExit:
        pass  #  handle the SystemExit to prevent the warning
